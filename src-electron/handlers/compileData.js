import ExcelJS from 'exceljs'
import { ipcMain } from 'electron';
import { loadDays } from "./loadXlsx.js"
import { dialog } from 'electron/remote';

// SUMMARY SHEET SETUP
async function summarySetup(workbook) {
  let sheetcount = 1
  workbook.worksheets.forEach(sheet => { sheetcount++ })

  let summarySheet = workbook.addWorksheet(`AUTOGENERATED SUMMARY ${sheetcount}`, { views: [{ state: 'frozen', ySplit: 9 }] });
  summarySheet.properties.defaultColWidth = 16

  summarySheet.getRow(9).eachCell((cell, i) => {
    if ((i > 1) && (i <= 9)) {
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "ffff00" }
      }
    }

    if (i <= 10) {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
      }
    }
  })
  summarySheet.getRow(9).font = { name: "Arial", bold: true }


  //TODO: setup formulas for row 8 cells
  let cols = ["E", "F", "G", "H", "I", "J"].forEach(col => {
    summarySheet.getCell(`${col}8`).numFmt = '[$₱-3409]#,##0.00'
    if (col != "J") summarySheet.getCell(`${col}8`).value = { formula: `SUM(${col}10:${col}1000)` }
    else summarySheet.getCell(`${col}8`).value = { formula: "SUM(H8:I8)" }

  })

  summarySheet.getRow(8).fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "FFFF00" }
  }

  summarySheet.getRow(8).eachCell({ includeEmpty: true }, (cell, i) => {
    if (i <= 11) {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
      }
    }
  })

  summarySheet.getCell("K8").border = {
    top: { style: "thin" },
    left: { style: "thin" },
    bottom: { style: "thin" },
    right: { style: "thin" }
  }

  summarySheet.getRow(8).font = { name: "Arial", size: 16 }


  return summarySheet
}

function initializeData(sheet, data) {
  let days = loadDays().map(day => { return day.name.substring(0, 3) })
  let rowIndex = 10
  let tableData = []
  // iterate through days (mon, tues, etc)
  days.forEach(day => {
    // iterate through each player's data (bong daily's bets, etc)
    data.forEach(player => {
      // iterate through each specific player's bet details (amount, etc)
      player.bets.forEach(bet => {
        if (day == bet.day) {

          //numFmt change to peso
          sheet.getCell(rowIndex, 5).numFmt = '[$₱-3409]#,##0.00'
          sheet.getCell(rowIndex, 6).numFmt = '[$₱-3409]#,##0.00'
          sheet.getCell(rowIndex, 7).numFmt = '[$₱-3409]#,##0.00'
          sheet.getCell(rowIndex, 8).numFmt = '[$₱-3409]#,##0.00'
          sheet.getCell(rowIndex, 9).numFmt = '[$₱-3409]#,##0.00'
          sheet.getCell(rowIndex, 10).numFmt = '0.00%'
          sheet.getCell(rowIndex, 11).numFmt = '[$₱-3409]#,##0.00'

          // Initialize each row
          let rowData = [bet.day, player.name, bet.team, bet.result, bet.amount, "", "", "", "", player.comm, ""]

          // initializing row values with formula
          rowData[5] = sheet.getCell(rowIndex, 6).value = { formula: `IF(D${rowIndex}="win",E${rowIndex},IF(D${rowIndex}="lose",E${rowIndex}*-1,0))` }
          rowData[6] = sheet.getCell(rowIndex, 7).value = { formula: `IF(D${rowIndex}="win",F${rowIndex}*0.1,IF(D${rowIndex}="lose",0,0))` }
          rowData[7] = sheet.getCell(rowIndex, 8).value = { formula: `F${rowIndex}-G${rowIndex}` }
          rowData[8] = sheet.getCell(rowIndex, 9).value = { formula: `E${rowIndex}*J${rowIndex}` }
          rowData[10] = sheet.getCell(rowIndex, 11).value = { formula: `H${rowIndex}+I${rowIndex}` }

          sheet.getRow(rowIndex).font = { name: "Arial" }
          sheet.getRow(rowIndex).outlineLevel = 1;

          //data validation for result column
          sheet.getRow(rowIndex).getCell(4).dataValidation = {
            type: 'list',
            allowBlank: false,
            formulae: ['"win,lose"']
          }

          tableData.push(rowData)

          // move to next row
          rowIndex++
        }
      })
    })
  })
  return tableData
}

export async function compileData(data) {
  ipcMain.handle('compileData', async (event, data) => {

    data = JSON.parse(data)
    let sheet = await summarySetup(wb2)
    let tableData = initializeData(sheet, data)

    // table setup (for drop down list and filtering )
    // TODO:
    sheet.addTable({
      name: "Summary",
      ref: "A9",
      totalsRow: false,
      headerRow: true,
      columns: [
        { name: "Days", filterButton: true },
        { name: "Bettor", filterButton: true },
        { name: "Team", filterButton: true },
        { name: "Result", filterButton: true },
        { name: "Amount", filterButton: true, },
        { name: "win/loss", filterButton: true },
        { name: "tong", filterButton: true },
        { name: "total", filterButton: true },
        { name: "comm", filterButton: true },
        { name: "com%", filterButton: true },
        { name: "subtotal", filterButton: true }
      ],
      rows: tableData
    })

    //column width adjustments
    sheet.columns.forEach((col, i) => { if (i >= 4 && i <= 9) { col.width = 22 } })

    // file saving
    let now = new Date().toISOString().split('T')[0];
    let options = {
      title: "Save Excel File",
      defaultPath: now,
      buttonLabel: "Compile Data",

      filters: [
        { name: 'xlsx', extensions: ['xlsx'] }
      ]
    };
    dialog.showSaveDialog(null, options).then(async ({ filePath }) => {
      await wb2.xlsx.writeFile(filePath).catch(err => console.log(err))
    });


  })
}

const wb2 = new ExcelJS.Workbook()
