import ExcelJS from 'exceljs'
import { readFile } from 'fs/promises'
import { ipcMain, shell } from 'electron';
import { loadDays } from "./loadXlsx.js"
import { dialog } from 'electron/remote';

export const handler = {
    channel: 'compile-data',
    execute: async (event, bw, type) => {
        console.log("compile-data script loaded")
        // load excel file and get workbook
        let wb = new ExcelJS.Workbook()

        let sheet = await summarySetup(wb2, bw)
        initializeData(sheet, data)

        // file saving
        let now = new Date().toISOString().split('T')[0];
        let options = {
            title: "Save Excel File",
            defaultPath: now,
            buttonLabel: "Compile Data",

            filters: [
                { name: 'xlsx', extensions: ['xlsx'] }
            ]
        };
        dialog.showSaveDialog(null, options).then(async ({ filePath }) => {
            await wb2.xlsx.writeFile(filePath).then(() => {
                bw.webContents.send('notify', { message: `File saved in ${filePath}`, type: "positive", timeout: 5000 })
                shell.openExternal(filePath)
            }).catch(err => {
                if (err.code == 'EBUSY') {
                    return bw.webContents.send('notify', { message: `Can't save file, Make sure that it is not OPEN in another program`, type: "negative", timeout: 0, closeBtn })
                }
            })

        });

    }
}

async function setup2(workbook, bw) {
    let sheet2;
    if (workbook.getWorksheet("AUTOGENERATED SUMMARY 2")) {
        bw.webContents.send('notify', { message: `Summary sheet 2 found! Replacing current summary sheet 2`, color: "warning", timeout: 5000 })
        sheet2 = workbook.getWorksheet("AUTOGENERATED SUMMARY 2");
    } else {
        sheet2 = workbook.addWorksheet(`AUTOGENERATED SUMMARY 2`);
    }

    //row 11 values & styles
    let headers = sheet2.getRow(11)
    headers.values = ["", "NET", "WIN / LOSS FOR THE WEEK", "COMMS", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]

    //apply font to every column
    sheet2.columns.forEach(col => { col.font = { name: "Arial", family: 2, size: 10 } })

    // row 11 specific font
    headers.font = { name: "Arial", family: 2, size: 11, bold: true }

    headers.eachCell((cell, i) => {
        cell.alignment = { vertical: "bottom", horizontal: "center" }
        if (i == 3)
            cell.alignment.wrapText = true
    })

    headers.eachCell({ includeEmpty: true }, (cell, i) => {
        if (i <= 11) {
            cell.border = {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" }
            }
            cell.fill = {
                type: "pattern",
                pattern: "solid",
                fgColor: { argb: "49b12f" }
            }
        }
    })

    // row 11 height & column width adjustments
    headers.height = 45
    sheet2.columns.forEach(col => { col.width = 12.5 })

    //hide comms column
    sheet2.getColumn(4).hidden = true

    return sheet2
}

//TODO: change this to get data by day instead (it currently gets the weekly win/loss)
function initializeData2(sheet2, data) {
    let rowIndex = 12
    let test = []
    data.forEach((player, i) => {
        test.push([])
        //display players on first column
        sheet2.getCell(rowIndex + i, 1).value = player.name
        player.bets.forEach(bet => {
            let winLose = bet.result.includes('lose') ? (bet.amount * -1) : (bet.amount)
            let tong = bet.result.includes('lose') ? 0 : (winLose * player.tong)
            let comm = bet.amount * player.comm
            let total = winLose - tong
            let subtotal = total + comm
            test[i].push(subtotal)
        })

        let weekly;
        if (test[i].length > 0)
            weekly = test[i].reduce((total, num) => { return total + num })
        sheet2.getCell(rowIndex + i, 3).value = weekly
    })

    //console.log(data)

    sheet2.autoFilter = "A11:J11"
}

// SUMMARY SHEET SETUP
async function summarySetup(workbook, bw) {

    let summarySheet;
    if (workbook.getWorksheet("AUTOGENERATED SUMMARY")) {
        bw.webContents.send('notify', { message: `Summary sheet found! Replacing current summary sheet`, color: "warning", timeout: 5000 })
        summarySheet = workbook.getWorksheet("AUTOGENERATED SUMMARY");
    } else {
        summarySheet = workbook.addWorksheet(`AUTOGENERATED SUMMARY`, { views: [{ state: 'frozen', ySplit: 9 }] });
    }

    // values & styles for row 9 cells
    summarySheet.getRow(9).values = ['Day', 'Bettor', 'Team', 'Result', 'Amount', 'win/loss', 'tong', 'total', 'comm', 'comm%', 'subtotal']

    // fonts for every column
    summarySheet.columns.forEach(column => {
        column.font = { name: 'Arial', family: 2, size: 10 };
    })
    summarySheet.getRow(9).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: "FFFF00" } };
    summarySheet.getRow(9).font = { bold: true }
    summarySheet.getRow(9).alignment = { vertical: 'middle', horizontal: 'center' };

    // formulas & styles for row 8 cells
    for (let col of ["E", "F", "G", "H", "I", "K"]) {
        summarySheet.getCell(`${col}8`).numFmt = '[$₱-3409]#,##0.00'
        if (col != "J") summarySheet.getCell(`${col}8`).value = { formula: `SUBTOTAL(9,${col}10:${col}1000)` }
        else summarySheet.getCell(`${col}8`).value = { formula: "SUM(H8,I8)" }
    }

    summarySheet.getRow(8).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: "FFFF00" } };
    summarySheet.getRow(8).font = { name: 'Arial', family: 2, size: 16 };
    summarySheet.getRow(8).alignment = { vertical: 'middle', horizontal: 'center' };

    summarySheet.getRow(8).eachCell({ includeEmpty: true }, (cell, i) => {
        if (i <= 11) {
            cell.border = {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" }
            }
        }
    })

    return summarySheet
}

function initializeData(sheet, data) {
    let days = loadDays().map(day => { return day.name.substring(0, 3) })
    let rowIndex = 10
    // iterate through days (mon, tues, etc)
    days.forEach(day => {
        // iterate through each player's data (bong daily's bets, etc)
        data.forEach(player => {
            // iterate through each specific player's bet details (amount, etc)
            player.bets.forEach(bet => {
                if (day == bet.day) {

                    // Initialize each row
                    let rowData = [bet.day, player.name, bet.team, bet.result, bet.amount,
                    { formula: `IF(D${rowIndex}="win",E${rowIndex},-E${rowIndex})` },
                    { formula: `IF(F${rowIndex}>0,E${rowIndex}*0.1, 0)` },
                    { formula: `F${rowIndex}-G${rowIndex}` },
                    { formula: `E${rowIndex}*J${rowIndex}` },
                    player.comm,
                    { formula: `H${rowIndex}+I${rowIndex}` }
                    ]

                    sheet.getRow(rowIndex).values = rowData

                    //data validation for result column
                    sheet.getCell(rowIndex, 4).dataValidation = {
                        type: 'list',
                        allowBlank: false,
                        formulae: ['"win,lose"']
                    }

                    //numFmt change to peso & percentage
                    for (let i of [5, 6, 7, 8, 9, 10, 11]) {
                        if (i == 10) { sheet.getCell(rowIndex, i).numFmt = '0.00%' }
                        else { sheet.getCell(rowIndex, i).numFmt = '[$₱-3409]#,##0.00' }
                    }

                    // move to next row
                    rowIndex++
                }
            })
        })
    })
    sheet.columns.forEach(col => { col.width = 16 })
    sheet.columns.forEach((col, i) => { if (i >= 4 && i <= 8 || i == 10) { col.width = 22 } })
    sheet.autoFilter = `A9:K9`
}

async function errorChecking(bw) {
    let excelFile = await readFile(path).catch(err => console.log(err))
    const wb = new ExcelJS.Workbook();
    await wb.xlsx.load(excelFile);
    let summaryWorksheet = wb.getWorksheet("Jojo summary");
    let summary = [];
    if (!summaryWorksheet) {
        console.log("No Jojo Summary Sheet")
        bw.webContents.send("notify", {
            type: "negative",
            message: "Jojo Summary sheet not found",
            timeout: 0,
            noClose: true
        })
        return
    }
    summaryWorksheet.getColumn('A').eachCell({ includeEmpty: false }, (cell, rn) => {
        console.log(cell.value)
        if (cell?.value?.formula?.includes("Jojo Bettors"))
            summary.push({
                index: rn,
                name: summaryWorksheet.getCell(`A${rn}`).value.result,
                net: summaryWorksheet.getCell(`B${rn}`).value?.result || 0,
                mon: summaryWorksheet.getCell(`E${rn}`).value?.result || 0,
                tue: summaryWorksheet.getCell(`F${rn}`).value?.result || 0,
                wed: summaryWorksheet.getCell(`G${rn}`).value?.result || 0,
                thu: summaryWorksheet.getCell(`H${rn}`).value?.result || 0,
                fri: summaryWorksheet.getCell(`I${rn}`).value?.result || 0,
                sat: summaryWorksheet.getCell(`J${rn}`).value?.result || 0,
                sun: summaryWorksheet.getCell(`K${rn}`).value?.result || 0,

            })
    })
    let total = 0;
    summary.forEach(s => {
        total += (s.mon + s.tue + s.wed + s.thu + s.fri + s.sat + s.sun);
    })
    console.log("SUM:", total);


}

export async function compileData(bw) {
    ipcMain.handle('compileData', async (event, args) => {

        let data = JSON.parse(args.data)
        let sheet = await summarySetup(wb2, bw)
        initializeData(sheet, data)

        let sheet2 = await setup2(wb2, bw)
        initializeData2(sheet2, data)

        // file saving
        let now = new Date().toISOString().split('T')[0];
        let options = {
            title: "Save Excel File",
            defaultPath: now,
            buttonLabel: "Compile Data",

            filters: [
                { name: 'xlsx', extensions: ['xlsx'] }
            ]
        };
        dialog.showSaveDialog(null, options).then(async ({ filePath }) => {
            await wb2.xlsx.writeFile(filePath).then(() => {
                bw.webContents.send('notify', { message: `File saved in ${filePath}`, type: "positive", timeout: 5000 })
                shell.openExternal(filePath)
            }).catch(err => {
                if (err.code == 'EBUSY') {
                    return bw.webContents.send('notify', { message: `Can't save file, Make sure that it is not OPEN in another program`, type: "negative", timeout: 10000 })
                }
            })

        });
    })
}

const wb2 = new ExcelJS.Workbook()




