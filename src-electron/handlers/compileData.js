import ExcelJS from 'exceljs'
import { ipcMain } from 'electron';
import { loadDays } from "./loadXlsx.js"
import { dialog } from 'electron/remote';

// SUMMARY SHEET SETUP
async function summarySetup(workbook) {
  let sheetcount = 1
  workbook.worksheets.forEach(sheet => { sheetcount++ })

  let summarySheet = workbook.addWorksheet(`AUTOGENERATED SUMMARY ${sheetcount}`, { views: [{ state: 'frozen', ySplit: 9 }] });
  summarySheet.getRow(9).values = ['Day', 'Bettor', 'Team', 'Result', 'Amount', 'win/loss', 'tong', 'total', 'comm', 'com%']
  summarySheet.getRow(9).eachCell((cell, i) => {
    if ((i > 1) && (i <= 9)) {
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "ffff00" }
      }
    }
  })

  summarySheet.getRow(9).eachCell((cell, i) => {
    if (i <= 10) {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" },
      }
    }
  })
  summarySheet.getRow(9).font = { name: "Arial", bold: true }



  //TODO: setup formulas for each cell
  summarySheet.getCell("E8").value = { formula: "SUM(E10:E1000)" }
  summarySheet.getCell("F8").value = { formula: "SUM(F10:F1000)" }
  summarySheet.getCell("G8").value = { formula: "SUM(G10:G1000)" }
  summarySheet.getCell("H8").value = { formula: "SUM(H10:H1000)" }
  summarySheet.getCell("I8").value = { formula: "SUM(I10:I1000)" }
  summarySheet.getCell("J8").value = { formula: "SUM(H8:I8)" }

  summarySheet.getRow(8).fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "ffff00" }
  }

  summarySheet.getRow(8).font = { name: "Arial", size: 16 }
  summarySheet.columns.forEach(col => { col.width = 16 })
  return summarySheet
}

export async function compileData(data) {
  ipcMain.handle('compileData', async (event, data) => {

    data = JSON.parse(data)
    let sheet = await summarySetup(wb2)
    let days = loadDays().map(day => { return day.name.substring(0, 3) })
    let rowIndex = 10
    days.forEach(day => {
      //console.log(data)
      data.forEach(player => {
        player.bets.forEach(bet => {
          if (day == bet.day) {
            // Variables that need calculation / has value based on other cells
            let winLose = bet.result.includes('lose') ? (bet.amount * -1) : (bet.amount)
            let tong = bet.result.includes('lose') ? 0 : (winLose * player.tong)
            let total = winLose - tong
            let comm = bet.amount * player.comm
            let result = total + comm

            // Initialize each row
            let rowData = [bet.day, player.name, bet.team, bet.result, bet.amount, winLose, tong, total, comm, player.comm, result]
            sheet.getRow(rowIndex).values = rowData
            sheet.getRow(rowIndex).font = { name: "Arial" }

            // Change com% column values to percentage format
            sheet.getCell(rowIndex, 10).numFmt = '0.00%'

            // move to next row
            rowIndex++
          }
        })
      })
    })

    let now = new Date().toISOString()
    let options = {
      title: "Save Excel File",
      defaultPath: now.substring(0, now.indexOf("T")),
      buttonLabel: "Compile Data",

      filters: [
        { name: 'xlsx', extensions: ['xlsx'] }
      ]
    };
    dialog.showSaveDialog(null, options).then(async ({ filePath }) => {
      await wb2.xlsx.writeFile(filePath)
    });


  })
}

const wb2 = new ExcelJS.Workbook()
