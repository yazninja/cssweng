import ExcelJS from 'exceljs'
import { ipcMain, shell } from 'electron';
import { loadDays } from "./loadXlsx.js"
import { dialog } from 'electron/remote';

// SUMMARY SHEET SETUP
async function summarySetup(workbook, bw) {
  let summarySheet;
  if (workbook.getWorksheet("AUTOGENERATED SUMMARY")) {
    bw.webContents.send('notify', { message: `Summary sheet found! Replacing current summary sheet`, color: "warning", timeout: 5000 })
    summarySheet = workbook.getWorksheet("AUTOGENERATED SUMMARY");
  } else {
    summarySheet = workbook.addWorksheet(`AUTOGENERATED SUMMARY`, { views: [{ state: 'frozen', ySplit: 9 }] });
  }

  // values & styles for row 9 cells
  summarySheet.getRow(9).values = ['Day', 'Bettor', 'Team', 'Result', 'Amount', 'win/loss', 'tong', 'total', 'comm', 'comm%', 'subtotal']

  // fonts for every column
  summarySheet.columns.forEach(column => {
    column.font = { name: 'Arial', family: 2, size: 10 };
  })
  summarySheet.getRow(9).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: "FFFF00" } };
  summarySheet.getRow(9).font = { bold: true }
  summarySheet.getRow(9).alignment = { vertical: 'middle', horizontal: 'center' };

  // formulas & styles for row 8 cells
  for (let col of ["E", "F", "G", "H", "I", "K"]) {
    summarySheet.getCell(`${col}8`).numFmt = '[$₱-3409]#,##0.00'
    if (col != "J") summarySheet.getCell(`${col}8`).value = { formula: `SUBTOTAL(9,${col}10:${col}1000)` }
    else summarySheet.getCell(`${col}8`).value = { formula: "SUM(H8,I8)" }
  }

  summarySheet.getRow(8).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: "FFFF00" } };
  summarySheet.getRow(8).font = { name: 'Arial', family: 2, size: 16 };
  summarySheet.getRow(8).alignment = { vertical: 'middle', horizontal: 'center' };

  summarySheet.getRow(8).eachCell({ includeEmpty: true }, (cell, i) => {
    if (i <= 11) {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
      }
    }
  })

  return summarySheet
}

function initializeData(sheet, data) {
  let days = loadDays().map(day => { return day.name.substring(0, 3) })
  let rowIndex = 10
  // iterate through days (mon, tues, etc)
  days.forEach(day => {
    // iterate through each player's data (bong daily's bets, etc)
    data.forEach(player => {
      // iterate through each specific player's bet details (amount, etc)
      player.bets.forEach(bet => {
        if (day == bet.day) {

          // Initialize each row
          let rowData = [bet.day, player.name, bet.team, bet.result, bet.amount,
          { formula: `IF(D${rowIndex}="win",E${rowIndex},-E${rowIndex})` },
          { formula: `IF(F${rowIndex}>0,E${rowIndex}*0.1, 0)` },
          { formula: `F${rowIndex}-G${rowIndex}` },
          { formula: `E${rowIndex}*J${rowIndex}` },
          player.comm,
          { formula: `H${rowIndex}+I${rowIndex}` }
          ]

          sheet.getRow(rowIndex).values = rowData

          //data validation for result column
          sheet.getCell(rowIndex, 4).dataValidation = {
            type: 'list',
            allowBlank: false,
            formulae: ['"win,lose"']
          }

          //numFmt change to peso & percentage
          for (let i of [5, 6, 7, 8, 9, 10, 11]) {
            if (i == 10) { sheet.getCell(rowIndex, i).numFmt = '0.00%' }
            else { sheet.getCell(rowIndex, i).numFmt = '[$₱-3409]#,##0.00' }
          }

          // move to next row
          rowIndex++
        }
      })
    })
  })
  sheet.columns.forEach(col => { col.width = 16 })
  sheet.columns.forEach((col, i) => { if (i >= 4 && i <= 8 || i == 10) { col.width = 22 } })
  sheet.autoFilter = `A9:K${rowIndex}`
}

export async function compileData(bw) {
  ipcMain.handle('compileData', async (event, data) => {

    data = JSON.parse(data)
    let sheet = await summarySetup(wb2, bw)
    initializeData(sheet, data)

    // file saving
    let now = new Date().toISOString().split('T')[0];
    let options = {
      title: "Save Excel File",
      defaultPath: now,
      buttonLabel: "Compile Data",

      filters: [
        { name: 'xlsx', extensions: ['xlsx'] }
      ]
    };
    dialog.showSaveDialog(null, options).then(async ({ filePath }) => {
      await wb2.xlsx.writeFile(filePath).then(() => {
        bw.webContents.send('notify', { message: `File saved in ${filePath}`, type: "positive", timeout: 5000 })
        shell.openExternal(filePath)
      }).catch(err => {
        if (err.code == 'EBUSY') {
          return bw.webContents.send('notify', { message: `Can't save file, Make sure that it is not OPEN in another program`, type: "negative", timeout: 10000 })
        }
      })

    });
  })
}

const wb2 = new ExcelJS.Workbook()
